import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import groovyx.net.http.HttpException
import static groovyx.net.http.HttpBuilder.configure

buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath "io.github.http-builder-ng:http-builder-ng-core:1.0.4"
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

ext.mavenVersion = getVersionFromMaven()
version = ext.mavenVersion ?: "$VERSION_MAJOR.$VERSION_MINOR" + (VERSION_PATCH != "0" ? VERSION_PATCH : "")
group = "mods.su5ed"
archivesBaseName = "gregtechmod"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    replace '@VERSION@', project.version

    mappings = "stable_39"
}

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    shade
    compile.extendsFrom(shade)
}

reobf {
    apiJar {}
    shadowJar {}
}

String getVersionFromMaven() {
    def ret = null
    def token = System.env.GITHUB_TOKEN ?: project.findProperty("GITHUB_TOKEN")
    def http = configure { ->
        request.uri = 'https://api.github.com'
        request.headers.put("Accept", "application/vnd.github.v3+json")
        request.headers.put("Authorization", "token ${token}")
    }

    try {
        http.get(String) { ->
            request.uri.path = '/users/Su5eD/packages/maven/mods.su5ed.gregtechmod/versions'
            response.success { fromServer, body ->
                String artifactVersion = (body.name[0] as String).replace('-', '.')
                String[] parts = artifactVersion.split("\\.")
                if (parts[0] == VERSION_MAJOR && parts[1] == VERSION_MINOR) ret = artifactVersion
            }
        }
    } catch (HttpException ignore) {
        getLogger().error("Could not retrieve latest version string from maven")
    }

    return ret
}

String bumpVersion() {
    if (ext.mavenVersion != null) {
        String[] artifactVersion = ext.mavenVersion.replace('-', '.').split("\\.")

        int versionPatch = VERSION_PATCH as int
        int versionMinor = VERSION_MINOR as int
        int artifactVersionMinor = artifactVersion[1] as int
        int artifactVersionPatch = artifactVersion[2] as int

        if (artifactVersionMinor < versionMinor) versionPatch = 0
        else if (artifactVersionMinor == versionMinor) versionPatch = artifactVersionPatch + 1

        return "$VERSION_MAJOR.$VERSION_MINOR" + (versionPatch > 0 ? ".$versionPatch" : "")
    }

    return version
}

build {
    if (Boolean.parseBoolean(System.getenv("BUMP_VERSION"))) {
        def bumped = bumpVersion()
        logger.info("Bumping version to $bumped")
        version = bumped
    }
    def prNumberRaw = System.getenv("PR_NUMBER")
    if (prNumberRaw != null) {
        int prNumber = prNumberRaw as int
        version += "-PR.$prNumber-SNAPSHOT"
    }

    dependsOn reobfShadowJar
    dependsOn "devJar"
    dependsOn 'apiJar'
}

shadowJar {
    dependsOn classes
    finalizedBy reobfShadowJar

    configurations = [project.configurations.shade]
    from sourceSets.api.output
    relocate "com.fasterxml", "mods.gregtechmod.repack.fasterxml"
    relocate "org.yaml", "mods.gregtechmod.repack.yaml"
    classifier ""
}

repositories {
    maven {
        name = "ic2"
        url = "https://maven.ic2.player.to/"
    }
    maven {
        name "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
}

dependencies {
    deobfCompile group: "net.industrial-craft", name: "industrialcraft-2", version: "${VERSION_IC2}-ex112"
    apiCompile group: "net.industrial-craft", name: "industrialcraft-2", version: "${VERSION_IC2}-ex112", classifier: "api" //GTE api depends on the ic2 api

    deobfCompile group: "cofh", name: "RedstoneFlux", version: "1.12-${VERSION_RF}", classifier: "universal"
    deobfCompile (group: "cofh", name: "CoFHCore", version: "1.12.2-${VERSION_COFHCORE}", classifier: "universal") {
        exclude group: "mezz.jei"
    }
    deobfCompile group: "cofh", name: "CoFHWorld", version: "1.12.2-${VERSION_COFHWORLD}", classifier: "universal"
    deobfCompile group: "cofh", name: "ThermalFoundation", version: "1.12.2-${VERSION_THERMALFOUNDATION}", classifier: "universal"
    deobfCompile group: "codechicken", name: "CodeChickenLib", version: "1.12.2-${VERSION_CODECHICKENLIB}", classifier: "universal"
    deobfCompile (group: "cofh", name: "ThermalExpansion", version: "1.12.2-${VERSION_THERMALEXPANSION}", classifier: "universal") {
        exclude group: "mezz.jei"
    }
    deobfCompile group: "mezz.jei", name: "jei_${VERSION_MC}", version: VERSION_JEI

    deobfCompile group: "com.mod-buildcraft", name: "buildcraft-api", version: VERSION_BUILDCRAFT
    deobfCompile group: "curse.maven", name: "energy-control-373450", version: "3207144"
    deobfCompile group: "curse.maven", name: "railcraft-51195", version: "2687757"
    compile (group: "appeng", name: "appliedenergistics2", version: VERSION_AE2, classifier: "api") {
        exclude group: "mezz.jei"
    }
    deobfCompile group: "slimeknights.mantle", name: "Mantle", version: VERSION_MANTLE
    deobfCompile group: "slimeknights", name: "TConstruct", version: VERSION_TCONSTRUCT

    def databind = "com.fasterxml.jackson.core:jackson-databind:2.9.0"
    implementation databind
    shade databind

    def yaml = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.0"
    implementation yaml
    shade yaml
}

jar {
    finalizedBy 'reobfJar'

    from sourceSets.api.output

    manifest {
        attributes([
                "Specification-Title": "gregtechmod",
                "Specification-Vendor": "Su5eD",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" : "Su5eD",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task devJar(type: ShadowJar, dependsOn: classes) {
    configurations = [project.configurations.shade]

    manifest {
        attributes([
                "Specification-Title": "gregtechmod",
                "Specification-Vendor": "Su5eD",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" : "Su5eD",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    relocate "com.fasterxml", "mods.gregtechmod.repack.fasterxml"
    relocate "org.yaml", "mods.gregtechmod.repack.yaml"

    from sourceSets.main.output
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir

    classifier = "dev"
}

task apiJar(type: Jar, dependsOn: classes) {
    finalizedBy reobfApiJar

    from sourceSets.api.output.classesDirs
    //Include sources in the api jar
    from sourceSets.api.allJava

    exclude 'META-INF/**'
    classifier = "api"
}

sourceJar {
    from sourceSets.api.allSource
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact shadowJar
            artifact apiJar
            artifact devJar
        }
    }
    repositories {
        maven {
            credentials {
                username System.env.GITHUB_ACTOR
                password System.env.GITHUB_TOKEN
            }
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Su5eD/GregTech-Experimental"
        }
    }
}
